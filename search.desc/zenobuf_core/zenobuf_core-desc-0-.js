searchState.loadedDescShard("zenobuf_core", 0, "Zenobuf Core - A simpler ROS-like framework in Rust\nClient implementation for Zenobuf\nError types for the Zenobuf framework\nMessage trait and utilities for working with Protocol …\nNode abstraction for Zenobuf\nParameter system for Zenobuf\nPublisher implementation for Zenobuf\nQuality of Service (QoS) profiles for Zenobuf\nService implementation for Zenobuf\nSubscriber implementation for Zenobuf\nTime utilities for Zenobuf\nTransport layer abstraction for Zenobuf\nUtility functions for Zenobuf\nClient for Zenobuf\nCalls the service with the given request\nCalls the service with the given request asynchronously\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the service name\nError when a client operation fails\nError during message decoding\nError during message encoding\nContains the error value\nError type for Zenobuf operations\nError when a node operation fails\nError when a node with the same name already exists\nError when an operation is not implemented\nError when an operation is not supported\nContains the success value\nOther errors\nError when a parameter operation fails\nError when a publisher operation fails\nResult type for Zenobuf operations\nError during serialization or deserialization\nError when a service operation fails\nError when a service with the same name already exists\nError when a service call fails\nError when a service call times out\nError when a subscriber operation fails\nError when a topic with the same name already exists\nError from the Zenoh transport layer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait for Zenobuf messages\nDecodes a message from a byte slice\nHelper function to decode a message from a byte slice\nHelper function to encode a message to a byte vector\nHelper function to get the type name of a message\nReturns the type name of the message\nNode abstraction for Zenobuf\nCreates a client for the given service name\nCreates a publisher for the given topic\nCreates a service for the given name with a handler\nCreates a subscriber for the given topic with a callback\nReturns the argument unchanged.\nGets a parameter\nCalls <code>U::from(self)</code>.\nReturns the name of the node\nCreates a new Node with the given name\nSets a parameter\nSpins the node, processing callbacks until the node is …\nSpins the node once, processing all pending callbacks\nCreates a new Node with the given name and transport\nParameter for Zenobuf\nReturns the argument unchanged.\nReturns the value of the parameter\nCalls <code>U::from(self)</code>.\nReturns the name of the parameter\nCreates a new Parameter\nSets the value of the parameter\nPublisher for Zenobuf\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPublishes a message\nReturns the topic name\nBest effort delivery (may drop messages)\nDurability of the communication\nHistory policy\nKeep all messages\nKeep the last N messages\nQuality of Service profile for publishers and subscribers\nReliability of the communication\nReliable delivery (guaranteed delivery)\nTransient local durability (persistence on the publisher …\nVolatile durability (no persistence)\nSets the deadline for receiving messages\nDeadline for receiving messages\nSets the depth of the history queue\nDepth of the history queue\nSets the durability of the QoS profile\nDurability of the communication\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the history policy of the QoS profile\nHistory policy\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the lifespan of messages\nLifespan of messages\nCreates a new QoS profile with default values\nCreates a QoS profile for parameters\nSets the reliability of the QoS profile\nReliability of the communication\nCreates a QoS profile for sensors\nCreates a QoS profile for services\nService for Zenobuf\nCloses the service\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the service name\nSubscriber for Zenobuf\nCloses the subscriber\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the topic name\nTime representation for Zenobuf\nDuration representation for Zenobuf\nAdds a Duration to the Time\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a Time from a Duration since the Unix epoch\nCreates a Duration from a std::time::Duration\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new Time from seconds and nanoseconds\nCreates a new Duration from seconds and nanoseconds\nCreates a Time representing the current time\nNanoseconds since the last second\nNanoseconds\nSeconds since the Unix epoch\nSeconds\nSubtracts a Duration from the Time\nConverts the Time to a Duration since the Unix epoch\nConverts the Duration to a std::time::Duration\nClient abstraction\nPublisher abstraction\nService abstraction\nSubscriber abstraction\nPrefixes for Zenoh key expressions\nZenoh transport implementation\nCalls the service with the given request\nCalls the service with the given request asynchronously\nCloses the subscriber\nCloses the service\nCreates a client for the given service name\nCreates a publisher for the given topic\nCreates a service for the given name\nCreates a subscriber for the given topic\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMock transport implementation for testing\nCreates a new Zenoh transport\nPublishes a message\nCreates a new Zenoh transport with the given configuration\nMock client implementation\nMock publisher implementation\nMock service implementation\nMock subscriber implementation\nMock transport for testing\nCreates a client for the given service\nCreates a publisher for the given topic\nCreates a service for the given name with a handler\nCreates a subscriber for the given topic with a callback\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new mock transport\nConverts a Duration to a human-readable string\nReturns the current time\nSleeps for the given duration\nConverts a string to a Duration")