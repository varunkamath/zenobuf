# git-cliff ~ configuration file for Zenobuf
# See https://git-cliff.org/docs/configuration

[changelog]
# A Tera template to be rendered as the changelog's header.
header = """
# Changelog

All notable changes to the Zenobuf project will be documented in this file.

"""

# A Tera template to be rendered for each release in the changelog.
body = """
{% if version %}
## {{ version | trim_start_matches(pat="v") }} ({{ timestamp | date(format="%Y-%m-%d") }})
{% else %}
## Unreleased
{% endif %}

{% for group, commits in commits | group_by(attribute="group") %}
### {{ group | upper_first }}

{% for commit in commits %}
- {% if commit.scope %}**{{ commit.scope }}**: {% endif %}{{ commit.message | upper_first }} ([{{ commit.id | truncate(length=7, end="") }}](https://github.com/your-username/zenobuf/commit/{{ commit.id }}))
{% endfor %}
{% endfor %}
"""

# A Tera template to be rendered as the changelog's footer.
footer = """
<!-- Generated by git-cliff -->
"""

# Remove leading and trailing whitespaces from the changelog's body.
trim = true

[git]
# Parse commits according to the conventional commits specification.
conventional_commits = true
# Exclude commits that do not match the conventional commits specification.
filter_unconventional = true
# Split commits on newlines, treating each line as an individual commit.
split_commits = false

# An array of regex based parsers for extracting data from the commit message.
commit_parsers = [
  { message = "^feat", group = "Features" },
  { message = "^fix", group = "Bug Fixes" },
  { message = "^doc", group = "Documentation" },
  { message = "^perf", group = "Performance" },
  { message = "^refactor", group = "Refactor" },
  { message = "^style", group = "Styling" },
  { message = "^test", group = "Testing" },
  { message = "^chore\\(release\\)", skip = true },
  { message = "^chore\\(deps", group = "Dependencies" },
  { message = "^chore", group = "Miscellaneous Tasks" },
  { body = ".*security", group = "Security" },
  { message = "^revert", group = "Reverts" },
  { message = "^ci", group = "Continuous Integration" },
  { message = "^build", group = "Build System" },
]

# Prevent commits that are breaking from being excluded by commit parsers.
protect_breaking_commits = true
# Exclude commits that are not matched by any commit parser.
filter_commits = false
# Regex to select git tags that represent releases.
tag_pattern = "v[0-9].*"

# Sort commits by oldest first
sort_commits = "oldest"
