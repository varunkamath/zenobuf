//! Procedural macros for the Zenobuf framework
//!
//! This crate provides procedural macros for the Zenobuf framework,
//! including the `ZenobufMessage` derive macro for implementing the
//! `Message` trait for Protocol Buffer messages.

use proc_macro::TokenStream;
use quote::quote;
use syn::{parse_macro_input, DeriveInput};

/// Derives the `Message` trait for a Protocol Buffer message
///
/// This macro automatically implements the `Message` trait for a Protocol
/// Buffer message generated by Prost. It extracts the type name from the
/// struct name and implements the required methods.
///
/// # Example
///
/// ```
/// #[derive(Clone, PartialEq, ::prost::Message, ZenobufMessage)]
/// pub struct Point {
///     #[prost(float, tag = "1")]
///     pub x: f32,
///     #[prost(float, tag = "2")]
///     pub y: f32,
///     #[prost(float, tag = "3")]
///     pub z: f32,
/// }
/// ```
#[proc_macro_derive(ZenobufMessage)]
pub fn derive_zenobuf_message(input: TokenStream) -> TokenStream {
    let input = parse_macro_input!(input as DeriveInput);
    let name = &input.ident;
    let (impl_generics, ty_generics, where_clause) = input.generics.split_for_impl();

    let expanded = quote! {
        impl #impl_generics ::zenobuf_core::Message for #name #ty_generics #where_clause {
            fn type_name() -> &'static str {
                stringify!(#name)
            }
        }
    };

    TokenStream::from(expanded)
}
